b).Linked List - Find a way to find the kth to the last element of linked list ( assume length of linked list is not known) 


class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, value):
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node

    def find_nth_from_end(self, n):
        if n <= 0:
            print("Invalid value for n.")
            return

        slow_runner = fast_runner = self.head

        # Move the fast runner n nodes ahead
        for _ in range(n):
            if fast_runner is None:
                print("Value of n exceeds the length of the LinkedList.")
                return
            fast_runner = fast_runner.next

        # Move both runners until the fast runner reaches the end
        while fast_runner:
            slow_runner = slow_runner.next
            fast_runner = fast_runner.next

        if slow_runner:
            print(f"The {n}th node from the end is: {slow_runner.value}")
        else:
            print("Invalid input or an empty list.")

# Driver's Code
if __name__ == "__main__":
    linked_list = LinkedList()
    linked_list.insert_at_beginning(20)
    linked_list.insert_at_beginning(4)
    linked_list.insert_at_beginning(15)
    linked_list.insert_at_beginning(35)

    # Function call
    linked_list.find_nth_from_end(4)






Approach:


1. Initialize:
  We  Start with two pointers at the beginning of the linked list.

2. Create Gap:
    We Move one pointer (fast) k nodes ahead.

3. Advance Together:
    We Move both pointers until the fast one reaches the end.

4. Retrieve Result:
    The slow pointer now points to the kth to the last element.

5. Handle Edge Cases:
   Account for scenarios where k exceeds the list length or the list is empty.


Source : from web , geeksforgeeks

